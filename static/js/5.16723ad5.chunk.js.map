{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","hooks/http.hook.js","services/MarvelService.js","components/pages/SingleComicPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useMarvelService","_apiBase","_apiKey","getAllCharacters","a","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","getComic","char","name","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices","View","comic","className","to","SingleComicPage","comicId","useParams","setComic","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","content"],"mappings":"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","file":"static/js/5.16723ad5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt={'error'}/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useCallback } from 'react';\r\n\r\nconst useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return { loading, request, error, clearError };\r\n};\r\n\r\nexport default useHttp;","import useHttp from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=67a79caa2e2acc912a2edf25bb515f26';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        \r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t);\r\n\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t}\r\n\r\n    const getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\r\n\t\treturn _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description || 'No description',\r\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || 'No description',\r\n\t\t\tpageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about page count',\r\n\t\t\tthumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || 'en-us',\r\n\t\t\tprice: comics.prices[0].price ? `${comics.prices[0].price}$` : 'Not available'\r\n\t\t}\r\n    }\r\n\r\n    return {\r\n        loading,\r\n        error,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        getAllComics,\r\n        getComic,\r\n        clearError\r\n    };\r\n}\r\n\r\nexport default useMarvelService;","import { useParams, Link } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from '../../services/MarvelService';\r\n\r\nimport './singleComicPage.scss';\r\n\r\nconst SingleComicPage = () => {\r\n    const { comicId } = useParams();\r\n    const [comic, setComic] = useState(null);\r\n\r\n    const { loading, error, getComic, clearError } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateComic();\r\n    }, [comicId]);\r\n\r\n    const updateComic = () => {\r\n        clearError();\r\n        getComic(comicId).then(onComicLoaded)\r\n    }\r\n\r\n    const onComicLoaded = (comic) => {\r\n        setComic(comic);\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading ? <Spinner /> : null;\r\n    const content = !(loading || error || !comic) ? <View comic={comic}/> : null;\r\n\r\n    return (\r\n        <>\r\n            {errorMessage}\r\n            {spinner}   \r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({ comic }) => {\r\n    const { title, description, pageCount, thumbnail, language, price } = comic;\r\n\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{title}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount}</p>\r\n                <p className=\"single-comic__descr\">Language: {language}</p>\r\n                <div className=\"single-comic__price\">{price}</div>\r\n            </div>\r\n            <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SingleComicPage;"],"sourceRoot":""}